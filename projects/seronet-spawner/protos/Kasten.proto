#VRML_SIM R2021a utf8
# license: Apache License 2.0
# license url: https://cyberbotics.com/webots_assets_license
# This is a PROTO file for Webots for a customizable tool shelf.
# tags: static
#
# made by Wenzheng Cai 2021, www.servicerobotik-ulm.de

PROTO Kasten [
  field SFVec3f    translation         0 0 0
  field SFRotation rotation            0 1 0 0
  field SFString   name                "Kasten"
  field SFVec3f    size                0.4 0.12 0.3                  # Defines the size of the shelf
  field SFColor    baseColor           0.447059 0.623529 0.811765
  
  field SFFloat    plateWidth          0.016                         # Defines the frame of the plate
  
  field SFString   contactMaterial     "default"                     # any string
  field SFFloat    mass                0.92                         # Defines the mass of the box in kg.
  field SFBool     locked              FALSE
]
{
  %{
    local wbrotation = require('wbrotation')

    -- check inputs
    if fields.size.value.x <= 0.0 then
      io.stderr:write("'size' must be positive\n")
      size = fields.size.defaultValue.x
    end
    if fields.size.value.y <= 0.0 then
      io.stderr:write("'size' must be positive\n")
      size = fields.size.defaultValue.y
    end
    if fields.size.value.z <= 0.0 then
      io.stderr:write("'size' must be positive\n")
      size = fields.size.defaultValue.z
    end
    
    if fields.plateWidth.value <= 0.0 then
      io.stderr:write("'plateWidth' must be positive\n")
      plateWidth = fields.plateWidth.defaultValue
    end
  }%
  
  Solid {
    translation IS translation
    rotation IS rotation
    children [
        Transform {
          translation 0 %{= 0.5 * fields.plateWidth.value }% 0
          children [
            Shape {
              appearance PBRAppearance {
                baseColor IS baseColor
                roughness 1
                metalness 0
              }
              geometry DEF PLATE Box {
                size %{= fields.size.value.x - 2 * fields.plateWidth.value }%  
                     %{= fields.plateWidth.value }%
                     %{= fields.size.value.z - 2 * fields.plateWidth.value }%
              }
            }
          ]
        }
    %{
    for m = 0, 1 do  
      for n = 0, 1 do
      }%
        Transform {
          translation %{= -math.pow(-1, m) * 0.5 * (fields.size.value.x - fields.plateWidth.value) }% 
                      %{= 0.5 * (fields.size.value.y + fields.plateWidth.value) }% 
                      %{= -math.pow(-1, n) * 0.5 * (fields.size.value.z - fields.plateWidth.value) }%
          children [
            Shape {
              appearance PBRAppearance {
                baseColor IS baseColor
                roughness 1
                metalness 0
              }
              geometry DEF ROUND Cylinder {
                height %{= fields.size.value.y - fields.plateWidth.value + 0.003 }%  
                radius %{= 0.5 * fields.plateWidth.value }%
              }
            }
          ]
        }
      %{
      end
    end
    }%
    
    %{
    for j = 0, 1 do  
      for k = 0, 1 do
      }%
        Transform {
          translation %{= -j * math.pow(-1, k) * 0.5 * (fields.size.value.x - fields.plateWidth.value) }% 
		%{= 0.5 * (fields.size.value.y + fields.plateWidth.value) }% 
		%{= -(1 - j) * math.pow(-1, k) * 0.5 * (fields.size.value.z - fields.plateWidth.value) }%
          children [
	 Shape {
	   appearance PBRAppearance {
	     baseColor IS baseColor
                roughness 1
	     metalness 0
	   }
	   geometry DEF PLATE Box {
	     size %{= (1 - j) * (fields.size.value.x - fields.plateWidth.value) + j * fields.plateWidth.value }% 
	          %{= fields.size.value.y - fields.plateWidth.value + 0.003 }% 
	          %{= (1 - j) * fields.plateWidth.value + j * (fields.size.value.z - fields.plateWidth.value) }%
	   }
	 }
          ]
        }
      %{
      end
    end
    }% 
    ]
    name IS name
    model "Kasten"
    contactMaterial IS contactMaterial
    boundingObject Group {
      children [
        Transform {
          translation 0 %{= 0.5 * fields.plateWidth.value }% 0
          children [
            Box {
              size %{= fields.size.value.x - 2 * fields.plateWidth.value }%  
                   %{= fields.plateWidth.value }%
                   %{= fields.size.value.z - 2 * fields.plateWidth.value }%
            }
          ]
        }
    %{
    for m = 0, 1 do  
      for n = 0, 1 do
      }%
        Transform {
          translation %{= -math.pow(-1, m) * 0.5 * (fields.size.value.x - fields.plateWidth.value) }% 
                      %{= 0.5 * (fields.size.value.y + fields.plateWidth.value) }% 
                      %{= -math.pow(-1, n) * 0.5 * (fields.size.value.z - fields.plateWidth.value) }%
          children [
            Cylinder {
              height %{= fields.size.value.y - fields.plateWidth.value + 0.003 }%  
              radius %{= 0.5 * fields.plateWidth.value }%
            }
          ]
        }
      %{
      end
    end
    }%
    
    %{
    for j = 0, 1 do  
      for k = 0, 1 do
      }%
        Transform {
          translation %{= -j * math.pow(-1, k) * 0.5 * (fields.size.value.x - fields.plateWidth.value) }% 
		%{= 0.5 * (fields.size.value.y + fields.plateWidth.value) }% 
		%{= -(1 - j) * math.pow(-1, k) * 0.5 * (fields.size.value.z - fields.plateWidth.value) }%
          children [
	 Box {
	   size %{= (1 - j) * (fields.size.value.x - fields.plateWidth.value) + j * fields.plateWidth.value }% 
	        %{= fields.size.value.y - fields.plateWidth.value + 0.003 }% 
	        %{= (1 - j) * fields.plateWidth.value + j * (fields.size.value.z - fields.plateWidth.value) }%
	 }
          ]
        }
      %{
      end
    end
    }% 
    ]
    }
    physics Physics {
      density -1
      mass IS mass
    }
    locked IS locked
  }
}


